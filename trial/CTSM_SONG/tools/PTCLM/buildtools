#!/bin/bash
#
# buildtools
#
# Build the clm tools that PTCLM will need to run when creating files.
#
# Environment variables to set:
#
# CTSM_ROOT:        To build with a separate root to CTSM component set the
#                   env variable CTSM_ROOT to the root directory to use.
#
# CIME_ROOT:        To build with a separate root to CIME scripts set the
#                   env variable CIME_ROOT to the root directory to use.
#
# Added debug mode by Yang Song Oct/24/2023
pwd=`pwd`
host=`hostname`
echo "Build clm tools for PTCLM on "$host""
debug_mode=1 #1- debug mode 0-optimization mode
#
# Get path to root
#
if [ -z "$CTSM_ROOT" ]; then
   cd "../.."
   CTSM_ROOT=`pwd`
   cd -
fi
if [ ! -d "$CTSM_ROOT" ];then
   echo "Directory $CTSM_ROOT does not exist"
   echo "Set env variable CTSM_ROOT"
   exit -1
fi
if [ ! -d "$CTSM_ROOT/src/biogeophys" ];then
   echo "Directory $CTSM_ROOT/src/biogeophys does not exist as expected"
   echo "Set env variable CTSM_ROOT to directory at head of CTSM code"
   exit -1
fi
if [ -z "$CIME_ROOT" ]; then
   if [ ! -d "$CTSM_ROOT/cime" ]; then
      cd "$CTSM_ROOT/../../cime"
      CIME_ROOT=`pwd`
      cd -
   else
      cd "$CTSM_ROOT/cime"
      CIME_ROOT=`pwd`
      cd -
   fi
fi
if [ ! -d "$CIME_ROOT" ];then
   echo "Directory $CIME_ROOT does not exist"
   echo "Set env variable CIME_ROOT"
   exit -1
fi
#
# Machine dependent stuff
#
CIME_MODEL="cesm"
export CIME_MODEL
toolsmake=""
if [[ "$host" =~ cheyenne ]] || [[ "$host" =~ r[0-9]+i[0-9]+n[0-9]+ ]]|| [[ "$host" =~ caldera ]] || [[ "$host" =~ geyser ]] || [[ "$host" =~ pronghorn ]]; then
  echo "Setup for cheyenne"
  . /glade/u/apps/ch/opt/lmod/8.1.7/lmod/lmod/init/sh

  gmake="gmake"
  parcmp=36
  machine="cheyenne"
  compiler="intel"
  netcdf=$NETCDF
  module load $compiler
  module load mkl
  module load netcdf
  module load ncl
#===================================================================
#UA-ocelote machine added by Yang Song
#==================================================================
elif [[ "$host" =~ UA-ocelote ]] || [[ "$host" =~ login[0-9] ]] ;then
  echo " Setup for UA-ocelote"
  . /cm/local/apps/environment-modules/4.0.0/Modules/init/sh
  gmake="gmake"
  parcmp=8
  machine="UA-ocelote"
  compiler="gnu"
  export netcdf_FORTRAN="/cm/shared/uaapps/netcdf/fortran/gcc/4.4.4"
  export NETCDF="/cm/shared/apps/netcdf/gcc/64/4.5.0"
  export NETCDF_C_PATH="/cm/shared/apps/netcdf/gcc/64/4.5.0"
  export NETCDF_FORTRAN_PATH="/cm/shared/uaapps/netcdf/fortran/gcc/4.4.4"
  export NETCDF_PATH="/cm/shared/apps/netcdf/gcc/64/4.5.0"
  export HDF5="/cm/shared/modulefiles/hdf5_18/1.8.20"
  export PYTHON="/cm/shared/uaapps/python/2.7.14"
  export PATH="${PATH}:/usr/bin"
  export PATH_modshare="${PATH_modshare}:/usr/bin"
  export ESMF_NETCDF="split"
  toolsmake="USER_FC=gfortran USER_FCTYP=gfortran USER_CC=gcc USER_LINKER=gfortran"
#==================================================================================
#UA-puma machine
#==================================================================================
elif [[ "$host" =~ r*u*n*|wentletrap ]] || [[ "$host" =~ r[0-9] ]] ;then
  echo " Setup for UA-puma"
  . /opt/ohpc/admin/lmod/lmod/init/sh
  gmake="gmake"
  parcmp=8
  machine="UA-puma"
  compiler="gnu"
  export netcdf_FORTRAN="/opt/ohpc/pub/libs/gnu8/openmpi3/netcdf-fortran/4.5.2"
  export NETCDF="/opt/ohpc/pub/libs/gnu8/openmpi3/netcdf/4.7.1"
  export NETCDF_C_PATH="/opt/ohpc/pub/libs/gnu8/openmpi3/netcdf/4.7.1"
  export NETCDF_FORTRAN_PATH="/opt/ohpc/pub/libs/gnu8/openmpi3/netcdf-fortran/4.5.2"
  export NETCDF_PATH="/opt/ohpc/pub/libs/gnu8/openmpi3/netcdf/4.7.1"
  export HDF5="/opt/ohpc/pub/libs/gnu8/openmpi3/hdf5/1.10.5"
  export PYTHON="/usr/bin/python"
  export PATH="${PATH}:/usr/bin"
  export PATH_modshare="${PATH_modshare}:/usr/bin"
  export NCARG_ROOT="/opt/ohpc/pub/apps/ncl_ncarg/6.6.2/"
  toolsmake="USER_FC=gfortran USER_FCTYP=gfortran USER_CC=gcc USER_LINKER=gfortran"
#===========================================================================

elif [[ "$host" =~ hobart ]] || [[ "$host" =~ h[0-9]+.cgd.ucar.edu ]]; then
  echo "Setup for hobart"
  . /usr/share/Modules/init/sh
  gmake="gmake"
  parcmp=2
  machine="hobart"
  compiler="intel"
  module load compiler/intel
  netcdf=$NETCDF_PATH
  export PATH="${PATH}:/usr/bin"
elif [[ "$host" =~ izumi ]] || [[ "$host" =~ i[0-9]+.unified ]]; then
  echo "Setup for izumi"
  . /usr/share/Modules/init/sh
  gmake="gmake"
  parcmp=2
  machine="izumi"
  compiler="intel"
  module load compiler/intel
  netcdf=$NETCDF_PATH
  export PATH="${PATH}:/usr/bin"
elif [[ "$host" =~ eureka ]] || [[ "$host" =~ vpn ]]; then
  echo "Setup for eureka"
  gmake="make"
  parcmp=12
  machine="homebrew"
  compiler="gnu"
  netcdf="/opt/local"
  toolsmake="USER_FC=gfortran-mp-4.8 USER_LINKER=gfortran-mp-4.8 USER_CC=gcc "
  case='$CASE'
  export NETCDF_PATH=$netcdf
else
  echo "Bad host to run on: know about cheyenne, hobart, izumi or eureka"
  exit -3
fi
export INC_NETCDF=${netcdf_FORTRAN}/include 
export LIB_NETCDF=${netcdf_FORTRAN}/lib 
#
# Build the tools
#
echo "Build the tools"
dirs=( \
       $CTSM_ROOT/tools/mksurfdata_map/src \
       $CIME_ROOT/tools/mapping/gen_domain_files/src \
     )
for dir in ${dirs[*]}; do
   echo "Build in $dir"
   cd $dir
   if [[ "$dir" =~ gen_domain ]]; then
      rm env_mach_specific.xml
      cmd="$CIME_ROOT/tools/configure --machine $machine --macros-format Makefile"      
      echo "$CIME_ROOT"
      echo "$cmd"
      $cmd
      if [ $? != 0 ]; then
         echo "Problem with configure: $?"
         exit -1
      fi
      #===add by Yang Song===========
      cmd=". ./.env_mach_specific.sh" 
      echo pwd
      echo cmd
      $cmd
     #===============================
   else
      #../.env_mach_specific.sh  # don't use this as it currently doesn't work for mpi-serial
      #cmd="ln -s $dirs/Macros.make $dirs/Macros"
      #echo "$cmd"
      echo "else loop"
      #$cmd
   fi
   $gmake clean
   if [ "$debug_mode" =~ 0 ];then
      cmd="$gmake OPT=TRUE SMP=TRUE -j $parcmp COMPILER=$compiler OS=Linux MPILIB=openmpi $toolsmake"
   else
      # DEBUG complier mode add by Yang Song
      cmd="$gmake OPT=FALSE SMP=TRUE -j $parcmp COMPILER=$compiler OS=Linux MPILIB=openmpi DEBUG=-g $toolsmake"
   fi
   echo "$cmd"
   $cmd
   if [ $? != 0 ]; then
      echo "Problem with build: $?"
      exit -1
   fi
   if [[ "$dir" =~ gen_domain ]]; then
      /bin/rm *.o
   else
      $gmake clean
   fi
done

echo -e "\n\nSuccessfully built CLM tools needed to create datasets for PTCLM\n"
